/*
 * Debug.java        1.00 2000/09/21
 *
 * Copyright (c) 2000 DIGITAL DISPATCH SYSTEMS, INC
 * Richmond, British Columbia, Canada
 * All rights reserved.
 *
 * 
 * 
 */

package com.dds.pathfinder.itaxiinterface.util;
import org.apache.log4j.*;

/**
 * This class is a helper class to make it handy to print out debug
 * statements.
 * It has been adapted to use the log4j Category class internally so that
 * output will be written to the same log file.  It's output is controlled
 * by log4j.properties.
 *
 * Usage Notes:
 * -- Call Debug2.getLogger(MyClass.class) to get an instance of this class.
 * -- Call isDebugEnabled() to find out if debugging is turned on.
 *    This is useful if the print statement contains a big expression.
 * 
 * @version 	1.00 21 Sept 2000
 * @author 	Ahmad Ahmad
 */
public final class Debug2 {
    /** An instance of Category (later this will be an instance of Logger). */
    // Logger logger;
    Category logger;
    
    /** Prevent developer from using this constructor. */
    protected Debug2() {}
    
    /** Prevent developer from using this constructor. */
    protected Debug2(Class name) {
        // logger = Logger.getLogger(name);
        logger = Category.getInstance(name);
        logger.info("Class to log:" + name.getName());
    }

    /** Prevent developer from using this constructor. */
    protected Debug2(String name) {
        // logger = Logger.getLogger(name);
        logger = Category.getInstance(name);
    }
    
    public static Debug2 getLogger(final Class name) {
        return new Debug2(name);
    }
    
    public static Debug2 getLogger(final String name) {
        return new Debug2(name);
    }

    public void print(String msg) {
        logger.debug(msg);
    }

    public void println(String msg) {
        logger.debug(msg);
    }

    public void print(Exception e, String msg) {
        print((Throwable)e, msg);
    }

    public void print(Exception e) {
        print(e, null);
    }

    public void print(Throwable t, String msg) {
        logger.error("Received throwable with Message: " + t.getMessage());
        if (msg != null)
            logger.error(msg);
        t.printStackTrace();
    }

    public void print(Throwable t) {
        print(t, null);
    }
    /**
     * Determines if debug level logging is enabled.
     *
     * @return true if enabled, else false.
     */
    public boolean isDebugEnabled() {
        return logger.isDebugEnabled();
    }
    
    /** Log the specified message, if the severity level is lower than the debug level */
    public void debug(final String message) {
        logger.debug(message);
    }
    
    /** Log the specified error message regardless of debug level */
    public void error(final String message) {
        logger.error(message);
    }

    /** Output a warning message. */
    public void warn(final String message) {
        logger.warn(message);
    }
    
    /** Output an information only message. */
    public void info(final String message) {
        logger.info(message);
    }
    
    
    /** Log the specified message and exception, if the severity level is lower than the debug level */
    public void debug(final String message, Throwable e) {
        logger.debug(message, e);
    }
    
    /** Log the specified error message and exception, regardless of debug level */
    public void error(final String message, Throwable e) {
        logger.error(message, e);
    }

    /** Output a warning message and exception. */
    public void warn(final String message, Throwable e) {
        logger.warn(message, e);
    }
    
    /** Output an information message and exception. */
    public void info(final String message, Throwable e) {
        logger.info(message, e);
    }
    
    
    
    /** Run this to unit test this component. */
    public static void main(String args[]) {
        // A log4j.properties file will have to be in your execute directory.
        PropertyConfigurator.configure("log4j.properties");
        Debug2 logger = Debug2.getLogger(Debug2.class);
        logger.warn("A warning message");
        if (logger.isDebugEnabled())
            logger.warn("Hey, debugging is on!");
        logger.info("An info message");
        logger.debug("A debug message");
        logger.print("Some error message");
        logger.print("Another message");
        try {
            int k = 0;
            throw new Exception("Generated by me.");
        } catch (Exception e) {
            logger.print(e, "Exception dividing by zero.");
        }
        logger.warn("Another warning");
    }   
}
